module sample;

procedure multiply;
	var x, y, z : integer;
begin
	//read(x);
	//read(y);
	z := 0;
	while x > 0 do
		if x mod 2 = 1 then
			z := z + y;
		end;
		y := 2 * y;
		x := x div 2;
	end;
	//write(x);
	//write(y);
	//write(z);
	//writeln;
end multiply;

procedure divide;
	var x, y, r, q, w : integer;
begin
	//read(x);
	//read(y);
	r := x;
	q := 0;
	w := y;
	while w <= r do
		w := 2 * w
	end;
	while w > y do
		q := 2 * q;
		w := w div 2;
		if w <= r then
			r := r - w;
			q := q + 1;
		end;
	end;
	//write(x);
	//write(y);
	//write(q);
	//write(r);
	//writeln;
end divide;

procedure binsearch;
	var i, j, k, n, x : integer;
	a: array 32 of integer;
begin
	//read(n);
	k := 0;
	while k < n do
		//read(a[k]);
		k := k + 1;
	end;
	i := 0;
	j := n;
	while i < j do
		k := (i + j) div 2;
		if x < a[k] then
			j := k
		else
			i := k + 1
		end
	end;
	//write(i);
	//write(j);
	//write(a[j]);
	//writeln;
end binsearch;

end sample.
